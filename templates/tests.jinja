{% set pascal_oracle_name = to_pascal_case(oracle.name) -%}
{% set camel_oracle_name = to_camel_case(oracle.name) -%}
import * as anchor from "@project-serum/anchor";
import { Program } from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { {{ pascal_oracle_name }} } from "../target/types/{{ oracle.name }}";

describe("{{ pascal_oracle_name }}", () => {
    const provider = anchor.Provider.env();
    anchor.setProvider(provider);

    const program = anchor.workspace.{{ pascal_oracle_name }} as Program<{{ pascal_oracle_name }}>;
    const authority = anchor.web3.Keypair.generate();
    let oraclePk = null;
    let oracleBump = null;

    // Create oracle.
    it("Created {{ pascal_oracle_name }}", async () => {
        await provider.connection.confirmTransaction(
            await provider.connection.requestAirdrop(authority.publicKey, 1000000000),
            "confirmed"
        );

        const [pk, bump] = await PublicKey.findProgramAddress(
            [Buffer.from(anchor.utils.bytes.utf8.encode("{{ pascal_oracle_name }}"))],
            program.programId
        );
        oraclePk = pk;
        oracleBump = bump;

        await program.rpc.create({
            accounts: {
                {{ camel_oracle_name }}: oraclePk,
                authority: authority.publicKey,
                systemProgram: anchor.web3.SystemProgram.programId,
            },
            signers: [authority]
        });
    });

    {% for field in oracle.fields %}
    // Set {{ field.name }}.
    it("Set {{ field.name }}", async () => {
        await provider.connection.confirmTransaction(
            await provider.connection.requestAirdrop(authority.publicKey, 1000000000),
            "confirmed"
        );

        // You must add your own data to this.
        // await program.rpc.set{{ to_pascal_case(field.name) }}(
        //     new_{{ field.name }},
        //     {
        //         accounts: {
        //             {{ camel_oracle_name }}: oraclePk,
        //             authority: authority.publicKey,
        //         },
        //         signers: [authority]
        //     }
        // );
    });
    {% endfor %}

    // Set all possible fields.
    it("Set all fields", async () => {
        await provider.connection.confirmTransaction(
            await provider.connection.requestAirdrop(authority.publicKey, 1000000000),
            "confirmed"
        );

        // You must add your own data to this.
        // await program.rpc.setFields(
        {%- for field in oracle.fields %}
        //     new_{{ field.name }}, 
        {%- endfor %}
        //     {
        //         accounts: {
        //             {{ camel_oracle_name }}: oraclePk,
        //             authority: authority.publicKey,
        //         },
        //         signers: [authority]
        //     }
        // );
    });
});
